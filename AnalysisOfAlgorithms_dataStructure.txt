Analysis of Algorithms :

Analysis of algorithms is the determination of the amount of time and space resource required to execute it. Usually, the efficiency or running time of an algorothm is stated
as a function relating the input length to the number of steps, known as time complexity or volume of memory, known as space complexity.

Asymptotic Analysis of Algorithms:

Refers defining the mathematical boundation/framing of tis runtime  performance. Evaluate the performance of an algorithm in terms of input size.

Linear and Constant complexity.

Analysis Types:

1. Average Case
2. Best Case
3. Worst Case

Hashing: O(1): Average case
Trie: O(L): L is the length of a key: best case

Linear Search: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

1 search
best case: O(1)

Linear Search: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

search 4:average case

Linear Search: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

search 10: worst case 

simple statement:

c = a+b;

O(1)

if Statement:

Worse Case: O(n)
best case: O(1)

Asymptotic Notation:

1. Big O: worst case : Upper bound
2. Big - Omega: best case : Lower Bound
3. small-o : Worst case : Upper bound
4. Small-omega(w): best case : Lower bound
5. Theta : average case


Algorithm			Time Complexity
				Best 		Average			Worst

Selection Sort			Big Omega	Theta(n^2)		O(n ^ 2)
				(n ^ 2)

Bubble Sort			Big Omega	Theta(n ^ 2)		O(n ^ 2)
				(n)

Insertion Sort			Big Omega	Theta(n ^ 2)		O(n ^ 2)
				(n)

Heap Sort			Big Omega	Theta(nlog(n))		O(nlog(n))
				(nLog(n))

Quick Sort			Big Omega	Theta(nlog(n))		O(n ^ 2)
				(nLog(n))

Merge Sort			Big Omega	Theta(nlog(n))		O(nlog(n))
				(nLog(n))